package hw_07;

import java.util.Arrays;

public class DynamicCollect {
    private String[] array; // масив для збереження елементів
    private int size; // лічильник фактиичної кількості елементів у масиві

    //консруктор для ініціалізації масиву
    public DynamicCollect() {
        array = new String[10]; // ініціалізуємо масив на 10 елементів за замовчуванням
        size =  0; // на початку розмір масиву 0, оскільки немає даних елементів
    }

    //1. Метод додавання елемента за певним індексом
    public boolean add (int index, String value) {
        // Перевірка на правильність індексу (має бути 0 і між поточним розміром)
        if (index < 0 || index > size) {
            return false; // повертаємо false, якщо індекс недійсний
        }
        // Якщо масив заповнений, збільшуємо його розмір
        if (size == array.length) {
            resizeArray();// Викликаємо допоміжний метод для збільшення масиву
        }
        // Зсуваємо елементи вправо, щоб звільнити місце для нового елементу
        for (int i = size; i > index; i--){
            array[i] = array[i-1];
        }
        array[index] = value; // Вставляємо новий елемент на вказаний індекс
        size++; // Збільшуємо кількість елементів
        return true; // Повертаємо true, якщо елемент успішно  даданий
    }

    // 2. Метод для додавання елементі в кінець масиву
    public boolean add (String value) {
        // Якщо масив заповнений, зьбільшуємо його розмір
        if (size == array.length) {
            resizeArray(); // Викликаємо меод, для збільшення розміру масиву
        }
        array[size] = value; // Додаємо елемент у кінець
        size ++; // Збільшуємо кількість елементів
        return true; // повертаємо true після успішного додавання
    }

    // 3. Метод для видалення елемента за індексом
    public boolean delete (int index) {
        // перевірка на правильність індексу (має бути між 0 і розміром масиву)
        if (index < 0 || index >= size) {
            return false;
        }
        // Зсуваємо елементи вліво, щоб закрити "пробіл", що утворився після видалення
        for (int i = index; i < size - 1; i ++) {
            array[i] = array[i + 1];
        }
        array[size - 1] = null; // очищаємо останній елемент (вже зсунули всі інші)
        size--; // зменшуємо кількість елементів
        return true; // повертаємо true, якщо елемент успішно видалено
    }
    // 4. Метод для видалення елемента за занченням
    public boolean delete (String value) {
        // проходимо по всьому масиву
        for (int i = 0; i < size; i++) {
            // Якщо знайдено елемент, який дорівнює заданому значенню
            if (array[i].equals(value)) {
                delete(i); // викликаємо метод для видалення за індексом
                return true; // повертаємо true, якщо елемент знайдено і видалено
            }
        }
        return false; // Якщо елемент не знайдено, по вертаємо false
    }

    // 5. метод для отримання елементів за індексом
    public  String get (int index) {
        // перевірка на правильність індексу (має бути між 0 і розміром масиву)
        if (index < 0 || index >= size) {
            return null;// повертаємо null, якщо індекс не дійсний
        }
        return array[index]; // повертаємо елемент за індексом
    }
    // допоміжний метод для збільшенян масиву
    private void resizeArray () {
        // Зюільшуємо розмір масиву вдвічі за допомогою методу Array.copyOf
        array = Arrays.copyOf(array, array.length * 2);
    }
    // метод для отримання кількості елементів у масиві
    public int size () {
        return size; // повертаємо поточний розмір масиву
    }
    // метод для виведення всіх елементі вколекції на екран
    public void print () {
        for (int i = 0; i < size; i++) {
            System.out.println(array[i] + " ");

        }
    }
}
